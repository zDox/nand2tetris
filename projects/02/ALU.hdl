// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    /* Zeroing numbers if zx or zy */
    Mux16 (a=x, b=false, sel=zx, out=zedx);
    Mux16 (a=y, b=false, sel=zy, out=zedy);

    /* Negating numbers if nx or ny */
    Not16 (in=zedx, out=pnedx);
    Not16 (in=zedy, out=pnedy);

    Mux16 (a=zedx, b=pnedx, sel=nx, out=fx);
    Mux16 (a=zedy, b=pnedy, sel=ny, out=fy);
    
    /* Anding or Adding numbers */
    And16 (a=fx, b=fy, out=oand);
    Add16 (a=fx, b=fy, out=oadd);

    Mux16 (a=oand, b=oadd, sel=f, out=opren);

    /* Negating output if no */
    Not16 (in=opren, out=pnedo);

    Mux16 (a=opren, b=pnedo, sel=no, out=out, out[0..7]=fpartin, out[8..15]=spartin, out[15]=ng);

    /* Calculation of status output zr */

    Or8Way (in=fpartin, out=partf);
    Or8Way (in=spartin, out=parts);

    Or (a=partf, b=parts, out=prenzr);
    Not (in=prenzr, out=zr);
}
