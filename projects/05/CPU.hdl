// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    Not (in=instruction[15], out=NotA);
    
    Or (a=NotA, b=instruction[5], out=loadA);
    And (a=instruction[12], b=instruction[15], out=selM);
    And (a=instruction[4], b=instruction[15], out=loadD);
    
    And (a=instruction[3], b=instruction[15], out=writeM);

    Mux16(a=aluout, b=instruction, out=stage1, sel=NotA);

    ARegister (in=stage1, out=aOut, load=loadA, out[0..14]=addressM);

    Mux16(a=aOut, b=inM, sel=selM, out=aluy);

    DRegister (in=aluout, out=alux, load=loadD);

    ALU (x=alux, y=aluy, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluout, zr=zr, ng=ng);

    // Check Jump coditions
    And (a=instruction[2], b=ng, out=mjc);
    And (a=instruction[1], b=zr, out=zjc);

    Or (a=ng, b=zr, out=ngorzr);
    Not (in=ngorzr, out=notngorzr);
    And (a=instruction[0], b=notngorzr, out=pjc);

    // 3-Way Or
    Or (a=mjc, b=zjc, out=mzjc);
    Or (a=mzjc, b=pjc, out=jumpcond);

    // Make check that jump only when c instruction
    And (a=jumpcond, b=instruction[15], out=jump);


    // Programm counter integration
    Not (in=jump, out=notjump);
    PC (in=aOut, load=jump, inc=notjump, reset=reset, out[0..14]=pc);
}
